
main.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_9>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
  74:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MAIN_1s>:
/*      mm-dd-yyyy                                                       */
/*                                                                       */
/*************************************************************************/
void MAIN_1s(void)
{
  APPL_1s();
  7c:	0c 94 41 01 	jmp	0x282	; 0x282 <APPL_1s>

00000080 <MAIN_100ms>:
/*      mm-dd-yyyy                                                       */
/*                                                                       */
/*************************************************************************/
void MAIN_100ms(void)
{
  APPL_100ms();
  80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <APPL_100ms>

00000084 <MAIN_1ms>:
/*      mm-dd-yyyy                                                       */
/*                                                                       */
/*************************************************************************/
void MAIN_1ms(void)
{
  APPL_1ms();
  84:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <APPL_1ms>

00000088 <MAIN_fast>:
/*        DATE          REMARKS                                          */
/*      mm-dd-yyyy                                                       */
/*                                                                       */
/*************************************************************************/
void MAIN_fast(void)
{
  88:	08 95       	ret

0000008a <SYS_init>:
/*      mm-dd-yyyy                                                       */
/*                                                                       */
/*************************************************************************/
void SYS_init(void)
{
  MCUCSR &= 0x80;     // set bit JTD: JTAG Interface Disable
  8a:	84 b7       	in	r24, 0x34	; 52
  8c:	80 78       	andi	r24, 0x80	; 128
  8e:	84 bf       	out	0x34, r24	; 52
  /*************************************************************************/
  /* Initialize Ports                                                      */
  /*************************************************************************/
  
  // PORTA – The Port A Data Register
  PORTA =   0x00;     //   0000 0000
  90:	1b ba       	out	0x1b, r1	; 27
                      //   ||+------ Bit  5:
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:
  
  // DDRA – The Port A Data Direction Register: 0 input  1 output
  DDRA =   0x00;      //   0010 0010
  92:	1a ba       	out	0x1a, r1	; 26
                      //   ||+------ Bit  5:
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:

  // PORTB – The Port B Data Register
  PORTB =   0x00;     //   0000 0000
  94:	18 ba       	out	0x18, r1	; 24
                      //   ||+------ Bit  5:
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:
  
  // DDRB – The Port B Data Direction Register: 0 input  1 output
  DDRB =   0x00;      //   0000 0000
  96:	17 ba       	out	0x17, r1	; 23
                      //   ||+------ Bit  5:
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:

  // PORTC – The Port C Data Register
  PORTC =   0x00;     //   0010 0000
  98:	15 ba       	out	0x15, r1	; 21
                      //   ||+------ Bit  5:
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:
  
  // DDRC – The Port C Data Direction Register: 0 input  1 output
  DDRC  =   0x00;     //   0000 0000
  9a:	14 ba       	out	0x14, r1	; 20
                      //   ||+------ Bit  5:
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:
  
  // PORTD – The Port D Data Register
  PORTD =   0x00;     //   0000 0000
  9c:	12 ba       	out	0x12, r1	; 18
                      //   ||+------ Bit  5:  outa
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:
  
  // DDRD – The Port D Data Direction Register: 0 input  1 output
  DDRD  =   0x38;     //   0011 1000
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	81 bb       	out	0x11, r24	; 17
                      //   |||| +--- Bit  3:  LED
                      //   |||+----- Bit  4:  outb
                      //   ||+------ Bit  5:  outa
                      //   |+------- Bit  6:
                      //   +-------- Bit  7:
PORTD = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	08 95       	ret

000000a8 <SYS_start>:
/*      mm-dd-yyyy                                                       */
/*                                                                       */
/*************************************************************************/
void SYS_start(void)
{
  TCCR0  = 0x0a;        // Compare Match Output Mode
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	83 bf       	out	0x33, r24	; 51
  TCNT0  = 0x00;
  ac:	12 be       	out	0x32, r1	; 50
  OCR0   = SYS_CPU_CLK / 8 / SYS_FAST_INT_FREQ - 1 ;
  ae:	87 ec       	ldi	r24, 0xC7	; 199
  b0:	8c bf       	out	0x3c, r24	; 60
  TIFR   = 0x07;        // clear all flags
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	88 bf       	out	0x38, r24	; 56
  TIMSK  = 0x02;        // enable Compare Match Interrupt
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	89 bf       	out	0x39, r24	; 57
  TCNT0  = 0x00;
  ba:	12 be       	out	0x32, r1	; 50
  
  MCUCR  = 0x00;        // disable sleep modes
  bc:	15 be       	out	0x35, r1	; 53
  
  SYS_ms_cnt = 0;
  be:	10 92 67 00 	sts	0x0067, r1
  SYS_100ms_cnt = 0;
  c2:	10 92 66 00 	sts	0x0066, r1
  SYS_s_cnt  = 0;
  c6:	10 92 65 00 	sts	0x0065, r1
  
  SYS_Fast_Lock = 0;
  ca:	10 92 68 00 	sts	0x0068, r1
  sei();
  ce:	78 94       	sei
  d0:	08 95       	ret

000000d2 <__vector_10>:
/*        DATE          REMARKS                                          */
/*      mm-dd-yyyy                                                       */
/*                                                                       */
/*************************************************************************/
ISR(TIMER0_COMP_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
  if(!SYS_Fast_Lock)
  f4:	80 91 68 00 	lds	r24, 0x0068
  f8:	81 11       	cpse	r24, r1
  fa:	2e c0       	rjmp	.+92     	; 0x158 <__vector_10+0x86>
  {
    SYS_Fast_Lock = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 68 00 	sts	0x0068, r24

    sei();
 102:	78 94       	sei
    MAIN_fast();
 104:	0e 94 44 00 	call	0x88	; 0x88 <MAIN_fast>
    cli();
 108:	f8 94       	cli
    
    if(SYS_ms_cnt<=0)
 10a:	80 91 67 00 	lds	r24, 0x0067
 10e:	18 16       	cp	r1, r24
 110:	f4 f0       	brlt	.+60     	; 0x14e <__vector_10+0x7c>
    {
      sei();
 112:	78 94       	sei
      MAIN_1ms();
 114:	0e 94 42 00 	call	0x84	; 0x84 <MAIN_1ms>
      
      if(SYS_100ms_cnt<=0)
 118:	80 91 66 00 	lds	r24, 0x0066
 11c:	18 16       	cp	r1, r24
 11e:	8c f0       	brlt	.+34     	; 0x142 <__vector_10+0x70>
      {
        MAIN_100ms();
 120:	0e 94 40 00 	call	0x80	; 0x80 <MAIN_100ms>
        SYS_100ms_cnt = 100-1;
 124:	83 e6       	ldi	r24, 0x63	; 99
 126:	80 93 66 00 	sts	0x0066, r24
        if(SYS_s_cnt<=0)
 12a:	80 91 65 00 	lds	r24, 0x0065
 12e:	18 16       	cp	r1, r24
 130:	24 f0       	brlt	.+8      	; 0x13a <__vector_10+0x68>
        {
          MAIN_1s();
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <MAIN_1s>
          SYS_s_cnt = 10-1;
 136:	89 e0       	ldi	r24, 0x09	; 9
 138:	01 c0       	rjmp	.+2      	; 0x13c <__vector_10+0x6a>
        }
        else
        {
          SYS_s_cnt--;
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	80 93 65 00 	sts	0x0065, r24
 140:	03 c0       	rjmp	.+6      	; 0x148 <__vector_10+0x76>
        }
      }
      else
      {
        SYS_100ms_cnt --;
 142:	81 50       	subi	r24, 0x01	; 1
 144:	80 93 66 00 	sts	0x0066, r24
      }
      
      cli();
 148:	f8 94       	cli
      
      SYS_ms_cnt = SYS_FAST_INT_FREQ / 1000 - 1;
 14a:	89 e0       	ldi	r24, 0x09	; 9
 14c:	01 c0       	rjmp	.+2      	; 0x150 <__vector_10+0x7e>
    }
    else
    {
      SYS_ms_cnt--;
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	80 93 67 00 	sts	0x0067, r24
    }
    
    SYS_Fast_Lock = 0;
 154:	10 92 68 00 	sts	0x0068, r1
  }
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <APPL_Init>:
*
****************************************************************************/


void APPL_Init( void )
{
 17a:	08 95       	ret

0000017c <APPL_Start>:
}


void APPL_Start(void)
{
  interr = 0;
 17c:	10 92 6b 00 	sts	0x006B, r1
  // configure  Timer1 for Fast PWM, period set to ICR1 
  // do PWM with OC1A
  TCCR1A = 0xf2;            // 0010 0000;
 180:	82 ef       	ldi	r24, 0xF2	; 242
 182:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = 0x19;            // 0001 1001;
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	8e bd       	out	0x2e, r24	; 46
  ICR1   = CYC1;            // period
 188:	8b e6       	ldi	r24, 0x6B	; 107
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	97 bd       	out	0x27, r25	; 39
 18e:	86 bd       	out	0x26, r24	; 38
  OCR1A  = ICR1 / 2;
 190:	86 b5       	in	r24, 0x26	; 38
 192:	97 b5       	in	r25, 0x27	; 39
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	9b bd       	out	0x2b, r25	; 43
 19a:	8a bd       	out	0x2a, r24	; 42
  OCR1B  = ICR1 / 2;
 19c:	86 b5       	in	r24, 0x26	; 38
 19e:	97 b5       	in	r25, 0x27	; 39
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	99 bd       	out	0x29, r25	; 41
 1a6:	88 bd       	out	0x28, r24	; 40
  TCNT1  = 0;
 1a8:	1d bc       	out	0x2d, r1	; 45
 1aa:	1c bc       	out	0x2c, r1	; 44
  TIMSK |= 0x04;
 1ac:	89 b7       	in	r24, 0x39	; 57
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	89 bf       	out	0x39, r24	; 57
  cycs = CYC1;
 1b2:	8b e6       	ldi	r24, 0x6B	; 107
 1b4:	80 93 6a 00 	sts	0x006A, r24
  cycl = cycs + 1;
 1b8:	8c e6       	ldi	r24, 0x6C	; 108
 1ba:	80 93 6e 00 	sts	0x006E, r24
  diffs = DIFF1S;
 1be:	8f e4       	ldi	r24, 0x4F	; 79
 1c0:	80 93 6d 00 	sts	0x006D, r24
  diffl = DIFF1L;
 1c4:	8f ec       	ldi	r24, 0xCF	; 207
 1c6:	80 93 6c 00 	sts	0x006C, r24
 1ca:	08 95       	ret

000001cc <APPL_Main>:
}


void APPL_Main(void)
{
 1cc:	08 95       	ret

000001ce <APPL_1ms>:
  // calculate 50% duty cycle 
  //
  // as the generated frequencies dont vary so much, this is not really necessary, 
  // but its nice do do it correct
  //
  t16 = ICR1;
 1ce:	86 b5       	in	r24, 0x26	; 38
 1d0:	97 b5       	in	r25, 0x27	; 39
  t16 = t16 + 1;
 1d2:	01 96       	adiw	r24, 0x01	; 1
  t16 = t16 / 2;
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
  t8  = t16-1;
 1d8:	81 50       	subi	r24, 0x01	; 1
  
  OCR1A  = t8;
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	9b bd       	out	0x2b, r25	; 43
 1de:	8a bd       	out	0x2a, r24	; 42
  OCR1B  = t8;
 1e0:	99 bd       	out	0x29, r25	; 41
 1e2:	88 bd       	out	0x28, r24	; 40
 1e4:	08 95       	ret

000001e6 <APPL_100ms>:
}

void APPL_100ms(void)
{
  // change each 100ms the target frequency
  switch (fstate)
 1e6:	80 91 69 00 	lds	r24, 0x0069
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	d9 f0       	breq	.+54     	; 0x224 <APPL_100ms+0x3e>
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	79 f1       	breq	.+94     	; 0x250 <APPL_100ms+0x6a>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <APPL_100ms+0x12>
 1f6:	41 c0       	rjmp	.+130    	; 0x27a <APPL_100ms+0x94>
  {
    case 1: 
      {
        fstate = 2;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	80 93 69 00 	sts	0x0069, r24
          ICR1 = CYC1;
 1fe:	8b e6       	ldi	r24, 0x6B	; 107
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	97 bd       	out	0x27, r25	; 39
 204:	86 bd       	out	0x26, r24	; 38
          TCNT1  = 0;
 206:	1d bc       	out	0x2d, r1	; 45
 208:	1c bc       	out	0x2c, r1	; 44
          cycs = CYC1;
 20a:	80 93 6a 00 	sts	0x006A, r24
          cycl = CYC1 + 1;
 20e:	8c e6       	ldi	r24, 0x6C	; 108
 210:	80 93 6e 00 	sts	0x006E, r24
          diffs = DIFF1S;
 214:	8f e4       	ldi	r24, 0x4F	; 79
 216:	80 93 6d 00 	sts	0x006D, r24
          diffl = DIFF1L;
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	80 93 6c 00 	sts	0x006C, r24
	  PORTLED |= PINLED;
 220:	93 9a       	sbi	0x12, 3	; 18
      }
      break;
 222:	08 95       	ret

    case 2: 
      {
        fstate = 3;
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	80 93 69 00 	sts	0x0069, r24
          ICR1 = CYC2;
 22a:	80 e6       	ldi	r24, 0x60	; 96
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	97 bd       	out	0x27, r25	; 39
 230:	86 bd       	out	0x26, r24	; 38
          TCNT1  = 0;
 232:	1d bc       	out	0x2d, r1	; 45
 234:	1c bc       	out	0x2c, r1	; 44
          cycs = CYC2;
 236:	80 93 6a 00 	sts	0x006A, r24
          cycl = CYC2 + 1;
 23a:	81 e6       	ldi	r24, 0x61	; 97
 23c:	80 93 6e 00 	sts	0x006E, r24
          diffs = DIFF2S;
 240:	8a e7       	ldi	r24, 0x7A	; 122
 242:	80 93 6d 00 	sts	0x006D, r24
          diffl = DIFF2L;
 246:	8a ef       	ldi	r24, 0xFA	; 250
 248:	80 93 6c 00 	sts	0x006C, r24
	  PORTLED &= ~PINLED;
 24c:	93 98       	cbi	0x12, 3	; 18
      }
      break;
 24e:	08 95       	ret

    case 3: 
      {
        fstate = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 69 00 	sts	0x0069, r24
          ICR1 = CYC3;
 256:	8b e5       	ldi	r24, 0x5B	; 91
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	97 bd       	out	0x27, r25	; 39
 25c:	86 bd       	out	0x26, r24	; 38
          TCNT1  = 0;
 25e:	1d bc       	out	0x2d, r1	; 45
 260:	1c bc       	out	0x2c, r1	; 44
          cycs = CYC3;
 262:	80 93 6a 00 	sts	0x006A, r24
          cycl = CYC3 + 1;
 266:	8c e5       	ldi	r24, 0x5C	; 92
 268:	80 93 6e 00 	sts	0x006E, r24
          diffs = DIFF3S;
 26c:	85 e5       	ldi	r24, 0x55	; 85
 26e:	80 93 6d 00 	sts	0x006D, r24
          diffl = DIFF3L;
 272:	85 ed       	ldi	r24, 0xD5	; 213
 274:	80 93 6c 00 	sts	0x006C, r24
      }
      break;
 278:	08 95       	ret

    default: 
      {
        fstate = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 69 00 	sts	0x0069, r24
 280:	08 95       	ret

00000282 <APPL_1s>:
  }
  
}

void APPL_1s(void)
{
 282:	08 95       	ret

00000284 <__vector_9>:

// interrupt routine should be optimized for max. speed
// max. 190kHz may be achieved
#pragma GCC optimize ("O3")
ISR(TIMER1_OVF_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
  if(interr < 0)        // if error is negative
 292:	80 91 6b 00 	lds	r24, 0x006B
 296:	87 fd       	sbrc	r24, 7
 298:	11 c0       	rjmp	.+34     	; 0x2bc <__vector_9+0x38>
    ICR1L = cycs;       // use short period
    interr += diffs;
  }
  else
  {
    ICR1L = cycl;       // else use long period
 29a:	80 91 6e 00 	lds	r24, 0x006E
 29e:	86 bd       	out	0x26, r24	; 38
    interr += diffl;
 2a0:	90 91 6b 00 	lds	r25, 0x006B
 2a4:	80 91 6c 00 	lds	r24, 0x006C
 2a8:	89 0f       	add	r24, r25
 2aa:	80 93 6b 00 	sts	0x006B, r24
  }
}
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti
#pragma GCC optimize ("O3")
ISR(TIMER1_OVF_vect)
{
  if(interr < 0)        // if error is negative
  {
    ICR1L = cycs;       // use short period
 2bc:	80 91 6a 00 	lds	r24, 0x006A
 2c0:	86 bd       	out	0x26, r24	; 38
    interr += diffs;
 2c2:	90 91 6b 00 	lds	r25, 0x006B
 2c6:	80 91 6d 00 	lds	r24, 0x006D
 2ca:	89 0f       	add	r24, r25
 2cc:	80 93 6b 00 	sts	0x006B, r24
  else
  {
    ICR1L = cycl;       // else use long period
    interr += diffl;
  }
}
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <main>:
/*************************************************************************/
long ttt;
int main(void)
{
  /**** SYS_init should be the first action in main ****/
  SYS_init();
 2de:	0e 94 45 00 	call	0x8a	; 0x8a <SYS_init>
 
  APPL_Init();
 2e2:	0e 94 bd 00 	call	0x17a	; 0x17a <APPL_Init>
  
  // /**** Sys_start should be called immediately before main loop ****/
  SYS_start();
 2e6:	0e 94 54 00 	call	0xa8	; 0xa8 <SYS_start>
  
  APPL_Start();
 2ea:	0e 94 be 00 	call	0x17c	; 0x17c <APPL_Start>

  /**** main loop ****/
  while(1)
  {
    APPL_Main();
 2ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <APPL_Main>
  }
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <main+0x10>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
